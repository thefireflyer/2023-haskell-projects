
{------------------------------------------------------------------------------

gen watch
        inputPath :: String
        writePath :: String
        cachePath :: String
        finalPath :: String

        buildHtml? :: Bool
        buildCode? :: Bool
      ==>
        [if no cache...] cachePath
          [find *.md] inputPath
          [normalize]
          [cache ast] clean?
          [build task graph] buildHtml? buildCode?
          [cache graph] clean?
        [start build thread]
          [topo search]
          [parallelize]
            [run build task] writePath finalPath
        

-------------------------------------------------------------------------------

gen build
  [if no cache ...]
    [find *.md]
    [normalize]
    [cache ast]
    [build md dependency graph]
      [media embeds] [page embeds] [html embeds] [eval embeds]
      [<all?> -> all code fragments]
    [cache graph]
  [start watch]
    [topo search]
    [parallelize]
      [run build task]

gen clean
  [delete cache]
  [delete output folders]

-------------------------------------------------------------------------------

[normalize]
  [normalize urls]
  [normalize local paths]

-------------------------------------------------------------------------------

[build md dependency graph]
  ?[media embeds]
    [note path]
  ?[page embeds]
    [note path]
  ?[html embeds]
    [note path]
  ?[eval embeds]
    [note explicit source dependencies]
  ?[all code fragments]
    [build fragment graph]

[start watch]
  [start build thread]
  [repeat every second]
    [find *.md]
    [if changed...]
      [normalize]
      [if ast changed ...]
        [cache ast]
        [update dep graph (downwards of modified page)]
        [cache graph]
        [rebuild page]
        [rebuild upwards graph]

    [for each external dependency ...]
      [if changed ...]
        [rebuild upwards graph]

    ?[backtracking]
      [find all written code fragments]
      [if modified ...]
          [update the markdown source for the fragment]
          [cache ast]
          [rebuild page] (skip code write task)
          [rebuild upwards graph] (skip code write tasks)

-------------------------------------------------------------------------------

[rebuild upwards graph]
  - breadth first search
    - pages depending on modified page
  - on each new node, rebuild the page

[topo search]
  - has to note "order" of each node
    order = max descentant order + 1

[parallelize]
  [for each order ...]
    [evaluate nodes in parallel]

-------------------------------------------------------------------------------

[build task]
  ?[write code file fragments]
    [compose fragments]
    [write to specified path]
  
  ?[run eval embeds]
    [compose fragments]
    ?[bash]
      [run in shell]
      [note results]
    ?[purescript]
      [start "spago repl"]
      [load specified dependencies]
      [evaluate]
      [note results]
    ?[typst]
      [create tmp typst project]
      [write code]
      [run typst]
      [note build output]
  
  ?[render html]
    [load embedded pages' outputs]
    [build html head]
      - relative path -> title
      - stylesheets
      - scripts
      - desc
    [build html body]
      ?[heading]
      ?[paragraph]
      ?[link]
      ?[image embed]
      ?[video embed]
      ?[text embed]
      ?[page embed]
        return page's output
      ?[html embed]
        return html
      ?[eval embed]
        ?[bash]
          render as a code snippet
          include results
        ?[purescript]
          render as a code snippet
          include results
        ?[typst]
          ?[success]
            render pdf embed
          ?[failure]
            render error message
      ?[code fragment]
        render as a code snippet
        include
          - fragment name
          - write path (if applicable)
      ?[code snippet]
        syntax highlighting
        lsp annotations (i.e., inferred type annotation in hsk)

-------------------------------------------------------------------------------

[parse]
  ?[markdown]
  ?[literate source]
    - fragment metadata
    - fragment source (basically just comments)
  ?[.bib]

-------------------------------------------------------------------------------

Misc notes:
  - literate source
    EITHER
      + Eval
      + Named
      + Write to file
    
    - backtracking doesn't support fragment boundary modification.
      you can modify the contents of each fragment, but you can't modify the 
      fragment boundary comments, or delete or add fragment boundary comments.

    - backtracking doesn't support langauges without comments (i.e., json)
    - behavior is undefined if two fragments try to write to the same file

    - reference fragments with <<fragment-name>>
    - named fragment in a different md file can be referenced by
      <<path/to/file/fragment-name>>
      (no .md !)

  - build system
    - dependency graph must be acyclic!
    - dependencies have to be explicitly declared when they're not fragments
    - the cache should not be manually modified

------------------------------------------------------------------------------}


-- | Build Request
data BuildRq = BuildRq
  { rqInput :: String -- ^ ctx input path
  , rqBuild :: String -- ^ ctx build path
  , rqFinal :: String -- ^ ctx final path
  , rqCache :: String -- ^ ctx cache path
  , rqTargetHtml :: Bool -- ^ ctx target html?
  , rqTargetCode :: Bool -- ^ ctx target code?
  , rqWatch :: Bool -- ^ ctx watch mode?
  } deriving Show

-------------------------------------------------------------------------------
--- /////////////////////////////////////////////////////////////////////// ---
-------------------------------------------------------------------------------

build :: UTCTime -> IO ()
build t0 = do
  t1 <- getCurrentTime
  files <- justPath . filterNew t0 <$> allFiles
  unless (null files) (putStrLn "Updating...")
  mapM_ buildPage files
  unless (null files) (putStrLn "Up to date!")
  threadDelay 1000
  if null files then build t0 else build t1

-------------------------------------------------------------------------------

allFiles :: IO [(String, UTCTime, Maybe String)]
allFiles = Turtle.fold
            ( do
                path <- Turtle.lstree inputPath
                time <- Turtle.datefile path
                return (path, time, extension path)
            )
            Control.Foldl.list

filterNew :: UTCTime -> [(String, UTCTime, Maybe String)] -> [(String, UTCTime, Maybe String)]
filterNew t0 = filter (\(_, t, e) -> t > t0 && e == Just "md")

justPath :: [(String, UTCTime, Maybe String)] -> [String]
justPath = map (\(p, _, _) -> p)

-------------------------------------------------------------------------------
--- /////////////////////////////////////////////////////////////////////// ---
-------------------------------------------------------------------------------

buildPage :: String -> IO ()
buildPage path = do 
  putStrLn ("[Gen] " ++ path)
  src <- readFile path
  let loc = local2loc $ global2local path
  let final = loc2final loc
  mktree $ outputPath ++ loc
  let md = parseMd src 
           |> fixLinks
  html <- genHTML md
          |> renderText
          |> Data.Text.Lazy.unpack
          |> embedInTemplate
  writeFile final html

-------------------------------------------------------------------------------
--- /////////////////////////////////////////////////////////////////////// ---
-------------------------------------------------------------------------------

genSt :: IO ()
genSt =
  sh $ do
    path <- Turtle.find (Turtle.ends $ Turtle.text $ pack ".md") inputPath
    liftIO $ putStrLn ("[Gen] " ++ path)
    src <- liftIO $ readFile path
    mktree (outD path)
    liftIO $ renderToFile (outP path) (genHTML (parseMd src))
  where
    srcD path = unpack
          ( fromMaybe
            (error "invalid path")
            (stripSuffix 
              (pack ".md") 
              (fromMaybe
                (error "invalid path") 
                (stripPrefix 
                  (pack inputPath) 
                  (pack path)
                )
              )
            )
          )
    outD path = outputPath ++ srcD path
    outP path = outD path ++ ".html"

-------------------------------------------------------------------------------
--- /////////////////////////////////////////////////////////////////////// ---
-------------------------------------------------------------------------------

fixLinks :: Node -> Node
fixLinks (Node p (LINK url text) xs) = (Node p (LINK (fixLink url) text) (map fixLinks xs))
fixLinks (Node p (IMAGE url text) xs) = (Node p (IMAGE (fixLink url) text) (map fixLinks xs))
fixLinks (Node p t xs) = (Node p t (map fixLinks xs))

fixLink :: Text -> Text
fixLink = unpack .> local2loc .> loc2final .> pack

-------------------------------------------------------------------------------

global2local :: String -> String
global2local = unpack . fromMaybe (error "invalid path") . stripPrefix (pack inputPath) . pack

local2loc :: String -> String
local2loc = unpack . fromMaybe (error "invalid path") . stripSuffix (pack ".md") . pack

loc2final :: String -> String
loc2final s = outputPath ++ s ++ ".html"

-------------------------------------------------------------------------------
--- /////////////////////////////////////////////////////////////////////// ---
-------------------------------------------------------------------------------

parseMd :: String -> Node
parseMd = commonmarkToNode [] [] . pack

-------------------------------------------------------------------------------
--- /////////////////////////////////////////////////////////////////////// ---
-------------------------------------------------------------------------------

genHTML :: Node -> Html ()
genHTML ast =
  body_
    ( do
        -- header_ (do 
        --           a_ [href_ $ pack $ baseUrl ++ "index.html" ] "thefireflyer"
        --           p_ ">>="
        --           a_ [href_ $ pack $ baseUrl ++ "..."] "..."
        --         )
        div_ [id_ "main"] (do div_ [id_ "page"] (nodeHtml ast))
        -- footer_
        --   ( a_ [href_ $ pack $ baseUrl ++ "index.html"] "✿ thefireflyer ✿"
        --   )
    )

-------------------------------------------------------------------------------

nodeHtml :: Node -> Html ()
nodeHtml (Node _ nT children) = 
  case nT of
    DOCUMENT -> div_ [class_ "page-inner"] (mapM_ nodeHtml children)
    THEMATIC_BREAK -> br_ []
    PARAGRAPH -> p_ (mapM_ nodeHtml children)
    BLOCK_QUOTE -> div_ [class_ "quote"] (mapM_ nodeHtml children)
    HTML_BLOCK x -> toHtmlRaw (unpack x)
    HEADING 1 -> h1_ (mapM_ nodeHtml children)
    HEADING 2 -> h2_ (mapM_ nodeHtml children)
    HEADING 3 -> h3_ (mapM_ nodeHtml children)
    LIST attr -> ul_ (mapM_ nodeHtml children)
    ITEM -> li_ (mapM_ nodeHtml children)
    -- LINEBREAK -> br_ []
    HTML_INLINE x -> toHtmlRaw (unpack x)
    EMPH -> i_ (mapM_ nodeHtml children)
    STRONG -> b_ (mapM_ nodeHtml children)
    LINK url title -> a_ [href_ url] (mapM_ nodeHtml children)
    CODE_BLOCK info x -> 
      div_ [class_ "code-holder"]
      ( div_ [class_ "code"] (do p_ (toHtml (unpack info))
                                 pre_ (toHtml (unpack x)))
      )
    TEXT x -> toHtml (unpack x)
    _ -> mapM_ nodeHtml children

-------------------------------------------------------------------------------
--- /////////////////////////////////////////////////////////////////////// ---
-------------------------------------------------------------------------------

embedInTemplate :: String -> IO String
embedInTemplate inner = do
  template <- lines <$> readFile (inputPath ++ "/template/template.html")
  let (left, middle) = span (/= "%%body%%") template
  let (_, right) = span (== "%%body%%") middle
  let whole = (unlines left) ++ inner ++ (unlines right)
  pure whole

-------------------------------------------------------------------------------
--- /////////////////////////////////////////////////////////////////////// ---
-------------------------------------------------------------------------------

-- liftIO $ case parseMd src of
--   Left dat -> writeFile (outP path) (genHTML dat css js)
--   Right err -> print err