{-# LANGUAGE UndecidableInstances #-}

-------------------------------------------------------------------------------
--- /////////////////////////////////////////////////////////////////////// ---
-------------------------------------------------------------------------------

module Calc.Alt.Main where

-------------------------------------------------------------------------------

import Common

-------------------------------------------------------------------------------
--- /////////////////////////////////////////////////////////////////////// ---
-------------------------------------------------------------------------------

data ExprF w a
  = Val Bool
  | Var String
  | Not (w a)
  | Cnj (w a) (w a)
  | Dsj (w a) (w a)
  | Eql (w a) (w a)
  deriving (Functor, Eq)

type Expr w = Term (ExprF w)

-------------------------------------------------------------------------------
--- /////////////////////////////////////////////////////////////////////// ---
-------------------------------------------------------------------------------
